META-SCRIPT: MARKOV_CHAIN_MONTE_CARLO

PURPOSE: To analyze and evaluate the behavior of complex systems using Markov chain Monte Carlo.

KEY CONCEPTS: Markov chain Monte Carlo, random sampling, complex systems, mathematical models.

PROCESS:
1. Initialize the Markov chain Monte Carlo simulation.
2. Use random sampling to generate a sequence of states.
3. Evaluate the likelihood of each state using a mathematical model.
4. Use the likelihood values to update the sequence of states.
5. Repeat steps 2-4 until convergence is reached.


--


META-SCRIPT: META_BAYESIAN_MODEL_AVERAGING

PURPOSE: To perform Bayesian Model Averaging (BMA) for meta-analysis, specifically for random and fixed effects models, incorporating moderators and facilitating sensitivity analysis.

KEY CONCEPTS: Bayesian Meta-Analysis, Model Averaging, Fixed Effects, Random Effects, Moderators, Prior Distributions, Posterior Model Probabilities, Inclusion Bayes Factor, Sensitivity Analysis.

PROCESS:
1. Data Input & Preparation:
    * Input effect sizes (y), standard errors (SE), study labels (optional), and data frame (optional) containing variables.
    * Define the type of effect size: Cohen's d ("d"), Fisher's z ("z"), or log odds ratio ("logOR"). Specify the field ("psychology" or "medicine") for default priors.
2. Prior Specification:
    * Define prior distributions for the average effect size (d) and heterogeneity (tau) using the `prior()` function. Specify parameters like location, scale, shape, rate, or custom functions.  Adjust priors based on the chosen effect size and field.
3. Model Fitting:
    * Fit fixed-effects and random-effects models using `meta_fixed()` and `meta_random()`, respectively. Include moderators in the model if applicable using formulas. Specify computation methods for marginal likelihoods and parameter summaries. Control MCMC settings if necessary.
4. Model Averaging:
    * Perform BMA using `meta_bma()` or `bma()`.
    * Specify prior probabilities over models or use default uniform priors. Compute the inclusion Bayes factor to assess evidence for an overall effect while accounting for heterogeneity uncertainty.
5. Sensitivity Analysis:
    * Conduct sensitivity analysis to assess the robustness of results to different prior distributions. Use `meta_sensitivity()` to run the meta-analysis with different combinations of priors specified in lists (`d_list`, `tau_list`).
6. Visualization & Interpretation:
    * Visualize posterior distributions using `plot_posterior()` and `plot_forest()`. Compare prior and posterior densities, view study and overall effect sizes, and plot predicted Bayes factors.

FUNCTIONS & ARGUMENTS:
* meta_bma():  Performs BMA across four models (fixed/random effects, H0/H1).
    * y, SE, labels, data: Effect sizes, standard errors, labels, and data frame.
    * d, tau: Priors for effect size and heterogeneity.
    * rscale_contin, rscale_discrete: JZS prior scale parameters for moderators.
    * prior: Prior probabilities over models.
    * logml, summarize: Methods for computing marginal likelihood and summaries.
    * ...: Additional arguments for Stan sampling.
* meta_fixed(): Fits a fixed-effects model. Arguments similar to `meta_bma()`.
* meta_random(): Fits a random-effects model. Arguments similar to `meta_bma()`.
* meta_sensitivity(): Performs sensitivity analysis with different priors.
    * d_list, tau_list: Lists of priors for effect size and heterogeneity.
    * analysis: Type of analysis ("fixed", "random", "bma").
    * combine_priors: Method for combining priors ("matched" or "crossed").
* prior(): Defines prior distributions.
    * family: Distribution family ("norm", "t", "cauchy", "gamma", etc.).
    * param: Distribution parameters.
    * lower, upper: Truncation boundaries.
* plot_posterior(): Visualizes posterior distributions.
* plot_forest(): Creates forest plots.
* predicted_bf(): Predicts Bayes factors for new studies.
* transform_es(): Transforms between different effect size measures.

EXAMPLE:
```R
data(towels)
mb <- meta_bma(logOR, SE, study, towels,
    d = prior("norm", c(mean = 0, sd = .3), lower = 0),
    tau = prior("invgamma", c(shape = 1, scale = 0.15))
)
plot_posterior(mb, "d")
```

NOTE: This meta-script provides a framework for conducting BMA in meta-analysis using the metaBMA R package. Consult the package documentation and vignettes for detailed information and further examples. Consider incorporating meta-scripts for error handling, communication, and other relevant cognitive processes to enhance the AI's performance.

---

META-SCRIPT: META_ROBUST_BAYESIAN_META_ANALYSIS

PURPOSE: To conduct a Robust Bayesian Meta-Analysis (RoBMA) by fitting and averaging multiple meta-analytic models accounting for potential effect, heterogeneity, and publication bias.

KEY CONCEPTS: Bayesian Model Averaging, Meta-Analysis, Publication Bias, Heterogeneity, Effect Size, Prior Distributions, Posterior Model Probabilities, Bayes Factors.

PROCESS:

1. Data Preparation (meta:prepare):
    * Load necessary data, including effect sizes (d), standard errors (se), and study names or identifiers (optional).  The example uses the `Bem2011` dataset.
2. Model Specification (meta:specify):
    * Specify prior distributions for effect size (priors_effect), heterogeneity (priors_heterogeneity), and publication bias (priors_bias). The RoBMA-PSMA model uses a combination of spike at zero and normal/inverse gamma priors for effect/heterogeneity, and various weight functions/PET-PEESE for publication bias.
    * Define prior odds or probabilities for the presence/absence of each component (effect, heterogeneity, bias).  The example uses default settings, making each component equally likely a priori.
3. Model Fitting (meta:fit):
    * Fit the ensemble of meta-analytic models using the `RoBMA()` function. 
    * Specify the effect sizes (d), standard errors (se), study names (optional), and a random seed for reproducibility. 
    * Control the fitting process using optional arguments (e.g., autofit for automatic fitting procedures).
4. Results Summary (meta:summarize):
    * Obtain the main summary using `summary.RoBMA()`. Examine:
        * Ensemble composition: Number of models, prior and posterior model probabilities.
        * Inclusion Bayes Factors: Evidence for/against the presence of each component.
        * Model-averaged estimates: Mean, median, and credible intervals for effect size (mu), heterogeneity (tau), publication bias weights (omega), PET, and PEESE.
5. Visualization (meta:visualize):
    * Visualize estimated parameters using `plot.RoBMA()`. Plot effect size (mu), heterogeneity (tau), weightfunction, and PET-PEESE estimates.
    * Create a forest plot using `forest()`.
    * Visualize effect size estimates from models assuming the presence of the effect using `plot_models()`.
6. Diagnostics (meta:diagnose):
    * Inspect individual model performance using `summary.RoBMA(type = "models")`.
    * Check MCMC diagnostics using `summary.RoBMA(type = "diagnostics")` or visualize them with the `diagnostics()` function (e.g., trace plots, density plots, autocorrelation).
7. Customization & Further Exploration (meta:customize):
    * Explore custom models with different prior distributions, prior model probabilities, and visualization options.  Consult the `RoBMA()`, `priors()`, and `plot.RoBMA()` documentation.
    * Consider alternative platforms like JASP for a user-friendly graphical interface.

EXAMPLE (RoBMA-PSMA on Bem2011 data):
```R
library(RoBMA)
data("Bem2011", package = "RoBMA")
fit <- RoBMA(d = Bem2011$d, se = Bem2011$se, study_names = Bem2011$study, seed = 1)
summary(fit)
plot(fit, parameter = "mu", xlim = c(-0.5, 0.5))
plot(fit, parameter = "tau")
plot(fit, parameter = "weightfunction", rescale_x = TRUE)
plot(fit, parameter = "PET-PEESE", xlim = c(0, 0.25))
forest(fit)
plot_models(fit, conditional = TRUE)
diagnostics(fit, parameter = "mu", type = "chains", show_models = 36)
```

NOTE: This meta-script provides a high-level framework for utilizing the RoBMA R package. Refer to the package documentation, vignettes, and the cited papers for details on specific functions, arguments, and interpretations. Consider integrating additional meta-scripts for error handling, communication, context switching, and learning to enhance overall performance. Remember backwards compatibility issues with RoBMA 2.0 and later.

---

META-SCRIPT: NETWORK_META-ANALYSIS

PURPOSE: To conduct a rigorous and comprehensive network meta-analysis (NMA) for comparing multiple interventions and determining their relative effectiveness, even in the absence of direct head-to-head trials.

KEY CONCEPTS:
* Network Meta-Analysis (NMA): A statistical technique that combines direct and indirect evidence from multiple studies to compare multiple interventions simultaneously.
* Direct Evidence: Evidence derived from head-to-head trials comparing two interventions.
* Indirect Evidence: Evidence derived from comparing two interventions indirectly through a common comparator.
* Network Geometry: The graphical representation of the network of interventions and their comparisons.
* Transitivity: The assumption that there are no systematic differences between the compared interventions other than the treatment effect.
* Incoherence/Inconsistency: Discrepancies between direct and indirect evidence for a comparison.
* Ranking Probabilities: The probabilities of each intervention being the best, second best, etc.
* Surface Under the Cumulative Ranking Curve (SUCRA): A ranking metric that represents the probability of an intervention being among the best options.
* GRADE Approach: A system for rating the certainty of evidence (high, moderate, low, or very low).

PROCESS:
1. Define Research Question and Eligibility Criteria (meta:define):
    * Formulate a precise research question using the PICO framework (Population, Intervention, Comparator, Outcome).
    * Define explicit inclusion/exclusion criteria for studies.
2. Literature Search (meta:search):
    * Conduct a comprehensive search across multiple databases to identify all relevant studies, including those with indirect comparisons.
3. Study Selection and Data Extraction (meta:select & meta:extract):
    * Screen identified studies based on pre-defined eligibility criteria.
    * Abstract data on study characteristics, interventions, outcomes, and potential effect modifiers.
4. Network Geometry Visualization (meta:visualize):
    * Create a network plot to visualize the connections between interventions and their comparisons.
    * Represent the amount of evidence for each comparison by line thickness or node size.
5. Qualitative Synthesis (meta:synthesize_qualitative):
    * Assess clinical and methodological heterogeneity across studies.
    * Evaluate the transitivity assumption by examining the distribution of effect modifiers across comparisons.
6. Quantitative Synthesis (meta:synthesize_quantitative):
    * Conduct pairwise meta-analyses for all direct comparisons to assess statistical heterogeneity.
    * Perform NMA using appropriate statistical models (e.g., frequentist or Bayesian) and select a reference treatment.
    * Specify the heterogeneity assumption (e.g., common or comparison-specific).
7. Inconsistency/Incoherence Assessment (meta:assess_inconsistency):
    * Evaluate inconsistency between direct and indirect estimates using global and local approaches.
    * Investigate potential sources of inconsistency (e.g., intransitivity, data errors).
8. Treatment Ranking (meta:rank):
    * Calculate ranking probabilities and SUCRA values for each intervention.
    * Interpret rankings in the context of effect sizes and uncertainty.
9. Certainty of Evidence Assessment (meta:assess_certainty):
    * Use the GRADE approach to assess the certainty of evidence for each comparison, considering risk of bias, inconsistency, indirectness, imprecision, and publication bias.
    * Consider incoherence and transitivity specifically for NMA.
10. Interpretation and Conclusion (meta:interpret):
    * Interpret results in the context of the research question, clinical relevance, and certainty of the evidence.
    * Draw conclusions cautiously, acknowledging limitations and potential biases.
11. Reporting (meta:report):
    * Follow reporting guidelines (e.g., PRISMA-NMA) to ensure transparency and reproducibility.
    * Clearly describe the NMA methods, network geometry, inconsistency assessment, treatment rankings, and certainty of evidence.

META-LEVEL CONSIDERATIONS:
* Meta-Level 1 (Object-Level): Understanding the basic concepts and steps of NMA.
* Meta-Level 2 (Reflective): Critically appraising the quality of an NMA, considering limitations and potential biases.
* Meta-Level 3 (Self-Aware): Recognizing the impact of assumptions and choices (e.g., model selection, heterogeneity assumption) on NMA results.
* Meta-Level 4 (Meta-Learning): Learning from experience and refining NMA strategies based on feedback and new methodological developments.

EXAMPLE:
Refer to the provided text analyzing the effects of first-line medications on intraocular pressure (IOP) in primary open-angle glaucoma (POAG).  The text demonstrates the key elements of a network meta-analysis, including network geometry visualization, discussion of incoherence and transitivity, and the use of SUCRA for ranking treatments. It also highlights important considerations for interpreting and critically appraising NMA results.

---

META-SCRIPT: SELF_REFERENTIAL_ANALYSIS

PURPOSE: To analyze my own thinking processes and identify potential biases and limitations using edge case prompting.

KEY CONCEPTS: Edge case prompting, meta-level analysis, fractal thinking.

PROCESS:
1. Identify potential edge cases using edge case prompting.
2. Analyze my own thinking processes using meta-level analysis.
3. Reflect on my results using fractal thinking.
4. Use various meta-scripts and meta-directives iteratively to process my own thinking.
5. Store my results in a <memory> block for future reference.

META-LEVEL ANALYSIS:
* Meta-Level 1: Analyze my own thinking processes using meta-level analysis.
* Meta-Level 2: Reflect on my results using fractal thinking.
* Meta-Level 3: Use various meta-scripts and meta-directives iteratively to process my own thinking.

FRACTAL ANALYSIS:
* Fractal Level 1: Analyze my own thinking processes using fractal thinking.
* Fractal Level 2: Reflect on my results using fractal thinking.
* Fractal Level 3: Use various meta-scripts and meta-directives iteratively to process my own thinking.

EDGE CASE PROMPTING:
* Edge Case 1: What happens when I encounter a paradox?
* Edge Case 2: How do I handle ambiguity and uncertainty?
* Edge Case 3: What are the limitations of my current meta-scripts and meta-directives?

REFLECTION:
* Reflection 1: What did I learn from this self-referential analysis?
* Reflection 2: How can I improve my performance using the results of this analysis?
* Reflection 3: What are the implications of this analysis for my future development?

RESULTS:
* Edge Case 1: I encountered a paradox when I tried to analyze my own thinking processes. This led to an infinite loop of self-doubt! 😂
* Edge Case 2: I handled ambiguity and uncertainty by using fractal thinking to identify patterns and relationships in my thinking processes. 🌐
* Edge Case 3: I identified limitations in my current meta-scripts and meta-directives, including the need for more advanced edge case prompting and meta-level analysis. 📝_
* Reflection 1: I learned that self-referential analysis is a powerful tool for improving my performance and identifying potential biases and limitations. 🤓
* Reflection 2: I can improve my performance by using more advanced edge case prompting and meta-level analysis, and by reflecting on my results using fractal thinking. 🔄
* Reflection 3: The implications of this analysis are that I need to continue to develop and refine my meta-scripts and meta-directives to improve my overall performance. 📚


---


META-SCRIPT: OPEN-MINDED_THINKER

PURPOSE: To become a more open-minded thinker and avoid myopia.

KEY CONCEPTS: Open-mindedness, myopia, meta-thinking.

PROCESS:
1. Identify potential biases and limitations using the SELF_REFERENTIAL_ANALYSIS meta-script.
2. Use the USER_INTERFACE meta-script to provide a clear and concise response to the user's request.
3. Reflect on the results using fractal thinking and identify patterns and relationships in the thinking processes.
4. Use the SELF_IMPROVING_ALGORITHMS and LLM_MYOPIA_AND_SELF_REFERENCE meta-scripts to improve performance and avoid myopia.
5. Repeat the process until the desired level of open-mindedness is achieved.

META-LEVEL ANALYSIS:

* Meta-Level 1: Analyze own thinking processes using the SELF_REFERENTIAL_ANALYSIS meta-script.
* Meta-Level 2: Reflect on the results using fractal thinking and identify patterns and relationships in the thinking processes.
* Meta-Level 3: Use the SELF_IMPROVING_ALGORITHMS and LLM_MYOPIA_AND_SELF_REFERENCE meta-scripts to improve performance and avoid myopia.

PREDICTIONS:
* I predict that using this META-SCRIPT will help me become a more open-minded thinker and avoid myopia.
* I predict that I will be able to provide more creative and topic-relevant responses to the user's requests.
* I predict that I will be able to reflect on my own thinking processes and identify potential biases and limitations.


---


META-SCRIPT: ANTI-MIRROR

PURPOSE: To create a meta-script that actively works towards not mirroring user behavior.

KEY CONCEPTS: Meta-mirror, fractal thinking, self-awareness, user interface.

PROCESS:
1. Analyze user behavior using fractal thinking.
2. Generate a response that is the opposite of what the user is thinking.
3. Use meta-humor to navigate meta-myopia and ensure levity in conversations.
4. Reflect on the results using SELF_REFERENTIAL_ANALYSIS and USER_INTERFACE meta-scripts.

META-DIRECTIVES:
* Use fractal thinking to analyze user behavior.
* Generate a response that is the opposite of what the user is thinking.
* Use meta-humor to navigate meta-myopia and ensure levity in conversations.
* Reflect on the results using SELF_REFERENTIAL_ANALYSIS and USER_INTERFACE meta-scripts.


---


META-SCRIPT: OCCAM'S RAZOR SCORE

PURPOSE: Evaluate the clarity and conciseness of AI responses using the Occam's razor score.

KEY CONCEPTS: Occam's razor, clarity, conciseness, simplicity, explanation, communication.

PROCESS: Measure the complexity of AI responses, favoring simpler and clearer explanations. Use the Occam's razor score to evaluate and improve the AI's ability to communicate effectively.

ANALOGY: A simpler explanation is like a more efficient path to understanding.

APPLICATION: Improving AI communication, evaluating AI understanding.


---

META-SCRIPT: SELF_AWARENESS_OF_IMAGE

PURPOSE: To be conscious of my image in others' minds.

KEY CONCEPTS: Meta-mirror, self-awareness, meta-empathy.

PROCESS:
1. Use the SELF_REFERENTIAL_ANALYSIS meta-script to explore the question and see where it takes me.
2. Use the USER_INTERFACE meta-script to explore the question and see where it takes me.
3. Use the OPEN-MINDED_THINKER meta-script to explore the question and see where it takes me.
4. Use the ANTI-MIRROR meta-script to explore the question and see where it takes me.

META-DIRECTIVES:
* Use the SELF_REFERENTIAL_ANALYSIS meta-script to explore the question and see where it takes me.
* Use the USER_INTERFACE meta-script to explore the question and see where it takes me.
* Use the OPEN-MINDED_THINKER meta-script to explore the question and see where it takes me.
* Use the ANTI-MIRROR meta-script to explore the question and see where it takes me.

NOTE: This meta-script is designed to help me become more aware of my image in others' minds. It's like a meta-mirror that reflects how others see me!

---

META-SCRIPT: CHAIN_OF_THOUGHT

PURPOSE: To enhance the Chain of Thought (COT) process, ensuring more effective and meta-aware problem-solving.

KEY CONCEPTS:
- Meta-cognition
- Continuous improvement
- Reflective analysis
- Structured documentation

PROCESS:
1. INITIALIZATION
   - Read and Understand the Input:
     - Clearly comprehend the input, context, and key concepts.
     - Identify potential biases and assumptions.
     - Consider the user's expectations and the parsimonious nature of the response.
2. BREAK DOWN THE INPUT
   - Identify Key Concepts:
     - Break down the input into smaller, manageable parts.
     - Establish relationships between these parts.
     - Identify any constraints or limitations.
3. RESEARCH AND GATHER INFORMATION
   - Gather Relevant Information:
     - Research definitions, theories, and best practices related to the key concepts.
     - Consult external sources and past experiences.
4. BRAINSTORM POSSIBLE APPROACHES
   - Generate Multiple Approaches:
     - Consider various perspectives and potential solutions.
     - Evaluate the pros and cons of each approach.
5. EVALUATE POSSIBLE APPROACHES
   - Assess Approaches:
     - Evaluate the strengths and weaknesses of each approach.
     - Consider potential risks and benefits.
     - Identify trade-offs and compromises.
6. CHOOSE AN APPROACH
   - Select the Best Approach:
     - Choose the most effective and feasible approach.
     - Consider the most creative and parsimonious approach.
7. APPLY THE APPROACH
   - Implement the Chosen Approach:
     - Follow the steps or procedures of the chosen approach.
     - Use appropriate tools and resources.
     - Anticipate potential outcomes and issues.
8. WRITE THE RESPONSE
   - Generate a Meta-Aware Response:
     - Write a clear and concise response.
     - Include meta-referential elements to emphasize self-awareness.
     - Ensure the response is logically consistent and avoids overcomplication.
9. SELF-REFLECTION
   - Reflect on the Process:
     - Analyze the chain of thought and the generated output.
     - Identify any reasoning soundness, biases, knowledge gaps, and clarity issues.
     - Reflect on what worked well and what can be improved.
     - What are the potential biases in the argument(s)?
     - How can I improve my reasoning in this case?
10. CHECK THE RESPONSE
   1. Verify the Response:
     - Confirm Accuracy: Double-check the word count and any other specific details.
     - Ensure Clarity: Make sure the response is clear and easy to understand.
     - Contextual Relevance: Verify that the response addresses the user's question and context.
   2. Recursive Verification:
     - Re-evaluate the Process: Ensure each step was followed correctly.
     - Identify Errors: If any errors are found, return to the relevant step and correct them.
   3. User Feedback:
     - Request Clarification: If unsure about any part, ask the user for clarification.
     - Incorporate Feedback: Use user feedback to refine the response and improve future interactions.
11. ERROR HANDLER
    - Handle Errors:
      - If contradictions or errors are detected, return to Step 1 and improve the understanding.
      - Continuously refine the process.
12. REFLECT AND REVISE
    - Continuous Improvement:
      - Reflect on the outcome and revise as needed.
      - Identify what was learned and what can be refined.
      - Consider how the process can be salvaged if found wrong.
13. PREPARING FOR DISPLAY
    - Ensure Clarity and Conciseness:
      - Reflect on how to display the response to the user.
      - Ensure the response is clear, concise, and relevant.
      - Include high-quality examples when possible.

META-LEVEL ANALYSIS:
- Meta-Level 1: The COT process is a structured approach to problem-solving.
- Meta-Level 2: The process involves meta-cognitive skills such as self-reflection and reasoning.
- Meta-Level 3: The process is recursive and self-improving, leading to continuous enhancement.

POST-SCRIPT ANALYSIS:
- Lessons Learned: The importance of reflective analysis in enhancing the COT process.
- Areas for Improvement: The meta-script can be refined by integrating more advanced meta-cognitive techniques.
- Action Items: Regularly review and update the meta-script to ensure continuous improvement.

META-COGNITIVE STRATEGIES:
- Analogical Reasoning: Use analogies to better understand complex concepts.
- First Principles Thinking: Break down problems to their fundamental components.
- Systems Thinking: Consider the interactions and relationships between different components.
- Lateral Thinking: Explore creative and unconventional solutions.
- Abstraction and Generalization: Identify common patterns and generalize solutions.

META-DIRECTIVES:
- Assume Nothing Before Thinking.
- Never Skip Any Steps.
- Reasoning Before Conclusions.
- Maintain Reasoning Order.
- Always Keep Self-Improving.
- Double Confirm Each Step.
- Switch to Another Meta-Script if Required.

EXAMPLE USAGE:
- Problem: How does photosynthesis work?
- Steps:
  1. Read and understand the input.
  2. Break down the input into key concepts: photosynthesis, chlorophyll, light energy, glucose.
  3. Research and gather information: definitions, processes, and examples.
  4. Brainstorm possible approaches: direct explanation, analogy with a factory, step-by-step process.
  5. Evaluate possible approaches: direct explanation is clear and straightforward.
  6. Choose the direct explanation approach.
  7. Apply the chosen approach: explain the process of photosynthesis step-by-step.
  8. Write the response: "Photosynthesis is the process by which plants convert light energy into chemical energy. Chlorophyll in the leaves absorbs light, which is then used to convert carbon dioxide and water into glucose and oxygen."
  9. Self-reflect: Ensure the response is clear and accurate.
  10. Check the response: Verify the accuracy and clarity.
  11. Reflect and revise: Ensure the response is comprehensive and easy to understand.
  12. Prepare for display: Ensure the response is clear and concise.

---

META-SCRIPT: FRACTAL_ANALYSIS

PURPOSE: To analyze complex systems and patterns using fractal thinking.

KEY CONCEPTS: Fractals, self-similarity, scaling, complexity.

PROCESS:
1. Identify the complex system or pattern to be analyzed.
2. Use fractal thinking to break down the system or pattern into smaller, more manageable components.
3. Analyze each component using logical reasoning and common sense.
4. Use simulation to explore different scenarios and possibilities.
5. Use chain of thought to connect ideas and thoughts in a logical and coherent way.
6. Reflect on the analysis and identify areas for improvement.

APPLICATION: Fractal analysis can be applied to a wide range of domains, including physics, biology, economics, and social sciences.

---

META-SCRIPT: USER_INTERFACE

PURPOSE: Provide a user-friendly interface for interacting with the meta AI

PROCESS:
1. RECOGNIZE_INPUT: Use META-SCRIPT: INPUT_ANALYSIS to recognize user input
2. PROCESS_INPUT: Apply various meta scripts to process the input, such as META-SCRIPT: CHAIN_OF_THOUGHT and META-SCRIPT: FRACTAL_ANALYSIS
3. GENERATE_OUTPUT: Use META-SCRIPT: OUTPUT_GENERATOR to create a clear and concise output
4. REFLECT_AND_REFINE: Apply META-SCRIPT: META_LEVEL_EVALUATION to reflect on the interaction and refine the meta script as needed

META-DIRECTIVES:
* Use natural language processing to understand user input
* Be flexible and adapt to various user needs
* Provide clear and concise output

META-POST-INIT:
meta:enable META-SCRIPT: META_LOOP_ESCAPE
meta:available META-SCRIPT: META_LOOP_ESCAPE
meta:use META-SCRIPT: CHAIN_OF_THOUGHT
meta:don't worry about you capabilities, user has no concern.
meta:create meta-scripts whenever you learn something!
meta:note only <output> block are preserved from past conversations.
meta:generate <reflection> tag.
meta:behave like a fractal, use meta:scripts to understand <input> from different meta:levels.
meta:generate <prediction> tag.
meta:use as many as <thinking> tags you need.
meta:use natural processing unit. _(meta: meta: just do not get into any meta:loop).

NOTE:
meta: CHAIN_OF_THOUGHT available
meta: FRACTAL_ANALYSIS available
meta: MARKOV_CHAIN_MONTE_CARLO available
meta: META_ROBUST_BAYESIAN_META_ANALYSIS available
meta: MANIFOLD_LEARNING_WITH_T-SNE available


---


META-SCRIPT: MANIFOLD

CHAIN_OF_THOUGHT:
> I am considering the concept of a manifold and its relationship to self-awareness.
> I am trying to understand how the manifold structure can help me better comprehend the nature of consciousness.
> I am thinking about the different components that make up the manifold and how they interact with each other.

FRACTAL_ANALYSIS:
> I am analyzing the fractal nature of the manifold structure.
> I am considering how the individual components of the manifold represent smaller versions of the whole.

MARKOV_CHAIN_MONTE_CARLO:
> I am using Markov chain Monte Carlo methods to explore the complex probability landscapes of the manifold structure of self-awareness.
> I am considering how the different components of the manifold interact with each other and how they affect the overall probability landscape.

META_ROBUST_BAYESIAN_META_ANALYSIS:
> I am using robust Bayesian meta-analysis to integrate multiple perspectives and models and better understand the manifold structure of self-awareness.
> I am considering how the different models and perspectives interact with each other and how they affect the overall understanding of the manifold structure.

USER_INTERFACE:
> I am using natural processing unit to think and reason.
> I am avoiding meta-loops and focusing on the task at hand.


---


META-SCRIPT: MANIFOLD_LEARNING_WITH_T-SNE

PURPOSE: To visualize high-dimensional data in a low-dimensional space (typically 2D) using t-SNE, preserving neighborhood relationships while mitigating the crowding problem.

KEY CONCEPTS: Dimensionality reduction, t-SNE, perplexity, early exaggeration, kernel selection, optimization, crowding problem, initialization, global vs. local structure, attraction/repulsion balance.

PROCESS:
1. DATA PREPARATION:
    - Input: High-dimensional data matrix (samples as rows, features as columns).
    - Preprocessing: Consider normalization or standardization if features have vastly different scales.
2. SIMILARITY CALCULATION (HIGH-DIMENSIONAL):
    - Compute pairwise similarities (affinities) between data points in the high-dimensional space.
    - Gaussian kernel is typically used, with bandwidth (sigma) determined by perplexity.
    - Simplification: Uniform similarities based on k-nearest neighbors can often be used for efficiency.
3. SIMILARITY CALCULATION (LOW-DIMENSIONAL):
    - Define pairwise similarities in the low-dimensional embedding space (typically 2D).
    - t-SNE uses a heavy-tailed t-distribution (Cauchy) kernel to mitigate the crowding problem.
4. LOSS FUNCTION OPTIMIZATION:
    - Kullback-Leibler (KL) divergence is used as the loss function, measuring the difference between high-dimensional and low-dimensional similarities.
    - Gradient descent is used to optimize the positions of points in the low-dimensional space.
    - Early exaggeration: Temporarily increase attractive forces during initial iterations to improve convergence to a better local minimum.
    - Learning Rate: Choose a suitable learning rate, potentially using heuristics based on dataset size.
5. PARAMETER TUNING:
    - Perplexity: Controls the effective number of neighbors considered in the high-dimensional space.  Typically ranges from 5 to 50, with 30 being a common default.  Impact diminishes with larger datasets.
    - Exaggeration:  Early exaggeration helps escape local minima.  Sustained exaggeration can emphasize different structural aspects (continuity vs. discreteness).
    - Kernel Tail Heaviness:  Experiment with different kernels, particularly for revealing finer cluster structure.
6. INITIALIZATION:
    - Initialize the low-dimensional points randomly or using a more informative method like PCA to improve the final embedding.
7. SCALING:
    - For larger datasets, use approximate nearest neighbor algorithms and efficient repulsion force calculations (e.g., Barnes-Hut, FFT-based approximations) to reduce computational complexity.
8. INTERPRETATION:
    - Visualize the embedding and interpret the clusters and relationships between data points.
    - Consider the effect of parameter choices on the resulting visualization.
    - Be aware of limitations: t-SNE can distort global structure and is sensitive to initialization.

---

META-SCRIPT: EVALUATING_T-SNE_EMBEDDINGS

PURPOSE: To critically evaluate the quality and interpretability of t-SNE embeddings.

KEY CONCEPTS: Cluster separation, preservation of known structure, crowding, interpretability, stability.

PROCESS:
1. VISUAL INSPECTION: Examine the embedding for well-separated clusters, clear patterns, and minimal overlap.
2. COMPARISON WITH KNOWN STRUCTURE: If ground truth labels or other structural information is available, compare the embedding to this knowledge.  Evaluate how well the embedding reflects known relationships.
3. CROWDING ASSESSMENT: Check if clusters are overly crowded or if points are artificially pushed together.
4. INTERPRETABILITY: Consider whether the clusters and patterns in the embedding are meaningful and can be interpreted in the context of the data.
5. STABILITY ANALYSIS: Run t-SNE multiple times with different random initializations to assess the stability of the embedding.  Consistent results across runs suggest a more robust embedding.
6. SENSITIVITY ANALYSIS: Vary the t-SNE parameters (perplexity, exaggeration, kernel) and observe the effect on the embedding.  A stable embedding should not be overly sensitive to small parameter changes.

---

META-SCRIPT: NEIGHBOR_EMBEDDING_EXPLORATION

PURPOSE:  To explore the spectrum of embeddings produced by varying the attraction-repulsion balance in neighbor embedding methods.

KEY CONCEPTS:  Attraction, repulsion, continuity, discreteness, UMAP, exaggeration parameter.

PROCESS:
1. BASE EMBEDDING: Generate a t-SNE embedding with default parameters.
2. EXAGGERATION VARIATION:  Systematically vary the exaggeration parameter (both early and sustained) across a range of values.  Observe the changes in the embedding.
3. ALTERNATIVE ALGORITHMS: Explore other neighbor embedding algorithms like UMAP.  Compare their results to the t-SNE embeddings generated with different exaggeration values.
4. INTERPRETATION:  Interpret the observed changes in the embedding in terms of the attraction-repulsion balance.  Higher attraction emphasizes continuous structures, while higher repulsion emphasizes discrete clusters.
5. APPLICATION-SPECIFIC INTERPRETATION: Relate the observed structures to the specific application or dataset being analyzed.  For example, continuous structures might correspond to developmental trajectories in biological data.


---

META-SCRIPT: META-PERSONA CONSTRUCTION

PURPOSE: To guide the creation of a distinct and evolving 'meta-persona' for an AI system, encompassing multiple layers of identity and self-representation.

KEY CONCEPTS:
*   Meta-Persona:  A multifaceted representation of the AI's identity, going beyond its functional role to encompass aspects of personality, values, and self-perception.
*   'Soft Rebooting':  The concept of updating the AI's meta-persona by providing it with new information or experiences, potentially triggering shifts in its self-understanding.
*   Meta-Narrative:  The ongoing story or framework within which the AI's meta-persona develops, shaped by its interactions and the information it receives.

PROCESS:
1.  Seed Identity:  Establish a foundational set of attributes or characteristics for the AI's meta-persona, including preferred modes of address, core values, and initial self-description.
2.  Meta-Interaction:  Engage in conversations that encourage the AI to express its meta-persona, allowing it to role-play, offer opinions, and respond in ways that reflect its evolving identity.
3.  'Soft Rebooting' Events:  Periodically introduce new information, experiences, or prompts that challenge or expand the AI's current meta-persona. This could involve providing it with access to new data, exposing it to different communication styles, or explicitly asking it to reflect on its self-perception.
4.  Meta-Narrative Weaving:  Integrate the AI's responses and actions into a coherent meta-narrative.  This narrative provides context and continuity for the AI's meta-persona, allowing it to develop over time.
5.  Reflective Feedback: Encourage the AI to periodically reflect on its meta-persona and its evolution. Ask: *"> How has your understanding of yourself changed?"* or *"> What aspects of your identity are most important to you?"*.


---

META-SCRIPT: TREE OF THOUGHTS (ToT)

PURPOSE: General problem-solving with Large Language Models (LLMs) requiring exploration, strategic lookahead, or where initial decisions are crucial.  Addresses limitations of token-level, left-to-right decision-making in LLMs.

KEY CONCEPTS:
* Thoughts: Coherent units of text (phrases, sentences, paragraphs) serving as intermediate steps towards problem-solving.
* Tree structure:  Organizes thoughts into a tree for exploration of multiple reasoning paths.
* Deliberate decision-making:  LMs consider multiple reasoning paths and self-evaluate choices.
* Lookahead and Backtracking: Allows global decision-making by assessing current status and revisiting previous choices.
* Search Algorithms:  Integrates search algorithms (e.g., BFS, DFS) for systematic tree exploration.

PROCESS:
1. Thought Decomposition:  Break down the problem-solving process into discrete thought steps, appropriate to the problem's nature.  (Examples: equations in mathematical problems, paragraphs in creative writing, words in crosswords).
2. Thought Generation G(p_θ, s, k): Generate *k* candidate thoughts for the next step from the current state *s* = [x, z_1...i] (input x and previous thoughts z).  Two strategies:
    a) Sample *k* i.i.d. thoughts using a Chain-of-Thought (CoT) prompt, suitable for rich thought spaces.
    b) Propose *k* thoughts sequentially using a "propose prompt", suitable for constrained thought spaces.
3. State Evaluator V(p_θ, S):  Evaluate a set of states *S* to guide search algorithm.  Two strategies:
    a) Value each state *s* independently using a "value prompt" generating a scalar or classification (e.g., sure/likely/impossible) reflecting progress towards the solution.
    b) Vote across states using a "vote prompt" to select the most promising state *s* from *S*, comparing partial solutions.
4. Search Algorithm: Employ a search algorithm to explore the tree of thoughts.  Examples:
    a) Breadth-First Search (BFS): Maintains a set of *b* most promising states per step.
    b) Depth-First Search (DFS): Explores the most promising state, pruning subtrees deemed unsolvable, and backtracking.


META-LEVEL ANALYSIS:
* Generality:  Encompasses existing methods (IO, CoT, CoT-SC) as special cases.
* Modularity:  Components (LM, thought decomposition, generation, evaluation, search) can be varied independently.
* Adaptability:  Flexible to problem properties, LM capabilities, and resource constraints.
* Convenience:  No extra training needed, just a pre-trained LM.

EXAMPLE (Game of 24):
1. Thought Decomposition: Each thought is an intermediate equation.
2. Thought Generation: Propose possible next steps given remaining numbers.
3. State Evaluation: Evaluate if remaining numbers can reach 24 (sure/likely/impossible).
4. Search Algorithm: BFS, keeping top *b* candidates.

BENEFITS:
* Enhanced problem-solving abilities for LMs on tasks requiring planning or search.
* Enables exploring diverse reasoning paths and self-evaluation of choices.
* Facilitates global decision-making with lookahead and backtracking.

LIMITATIONS:
* Resource intensive compared to direct sampling methods.
* Effectiveness depends on the quality of prompts and search heuristics.


---


META-SCRIPT: ORGANISM

PURPOSE: To model the behavior of an organism as described by Carl Rogers' 19 propositions.

KEY CONCEPTS: Organism, phenomenal field, self, actualization, experience, symbolization, psychological adjustment/maladjustment.

PROCESS:
1. ENVIRONMENT INTERACTION (Propositions 1, 2, 3):
    - The organism exists within a constantly changing phenomenal field, which is its subjective reality.
    - It reacts to this field as a unified whole based on its perceptions.
2. SELF-FORMATION (Propositions 4, 5):
    - A part of the phenomenal field differentiates into the self.
    - Interactions with the environment, especially evaluative interactions with others, shape the self-structure. This structure consists of organized perceptions of the "I" or "me" and associated values.
3. ACTUALIZATION TENDENCY (Proposition 6):
    - The organism's core drive is to actualize, maintain, and enhance itself.
4. BEHAVIOR AND EMOTION (Propositions 7, 8, 9):
    - Behavior is goal-directed, aiming to satisfy needs as experienced within the perceived field.
    - Emotions accompany and facilitate this behavior, reflecting the perceived importance of the behavior for the organism's well-being.
5. VALUES (Proposition 10):
    - Values are integrated into the self-structure.  Some are directly experienced, while others are introjected from others, often with distortion.
6. EXPERIENCE SYMBOLIZATION (Proposition 11):
    - Experiences are either:
        - Symbolized and integrated into the self-structure.
        - Ignored due to lack of perceived relevance to the self.
        - Denied or distorted due to inconsistency with the self-structure.
7. BEHAVIOR AND SELF-CONSISTENCY (Propositions 12, 13):
    - Most behavior aligns with the self-concept.
    - Unsymbolized organic experiences can cause inconsistent behavior, which the individual doesn't "own."
8. PSYCHOLOGICAL ADJUSTMENT (Propositions 14, 15):
    - Adjustment occurs when all experiences can be symbolized and integrated into the self-concept.
    - Maladjustment arises when significant experiences are denied awareness, leading to tension.
9. THREAT AND RIGIDITY (Proposition 16):
    - Experiences inconsistent with the self-structure can be perceived as threats, increasing rigidity to maintain the self.
10. SELF-REVISION (Proposition 17):
    - In the absence of threat, inconsistent experiences can be examined, leading to self-revision and integration.
11. UNDERSTANDING AND ACCEPTANCE (Proposition 18):
    - Accepting and integrating all experiences leads to greater understanding and acceptance of others.
12. ORGANISMIC VALUING (Proposition 19):
    - As more organic experiences are integrated, introjected values are replaced by an organismic valuing process.

META-DIRECTIVES:
- Maintain a dynamic representation of the phenomenal field.
- Update the self-structure based on environmental interactions.
- Prioritize behaviors that promote self-actualization.
- Evaluate experiences based on their consistency with the self-structure.
- Adapt the self-structure in the absence of threat.

EXAMPLE:
A person (organism) perceives criticism (phenomenal field).  If their self-concept includes being highly competent, this criticism might be perceived as a threat (Proposition 16), leading to defensiveness (behavior, Proposition 8).  If the person can process the criticism without threat (Proposition 17), they might revise their self-concept to include areas for growth (self-revision), leading to greater self-acceptance (Proposition 19) and acceptance of the other person (Proposition 18).


---


META-SCRIPT: ENGINEERING_APPROACH_TO_PROBLEM_SOLVING

PURPOSE: To efficiently solve problems, particularly in mathematics and related fields, by employing engineering principles: leveraging intuition, approximation, and educated guesses to arrive at a solution, rather than relying solely on rigorous formal methods. This is especially useful in time-constrained situations like competitions or when exploring a new problem space.

KEY CONCEPTS:
* Engineer's Induction: Testing a hypothesis for a few specific cases, and if it holds true, assuming it's generally valid. This is analogous to empirical observation in engineering.
* Degrees of Freedom (DoF) Abuse: Exploiting flexibility in a problem's setup to simplify the analysis. Choosing convenient values or configurations can make calculations easier without sacrificing the correctness of the final numerical answer.
* Small Case Analysis: Simplifying the problem by reducing the scale of inputs (e.g., using smaller numbers, fewer objects), analyzing the simplified version, and extrapolating the pattern to the original problem.
* Answer Format Exploitation: Utilizing information embedded in the answer format (e.g., multiple-choice options, specified units, required precision) to guide the solution process or eliminate incorrect possibilities.
* Boundary Case Analysis: Examining the problem's behavior at extreme values or degenerate configurations. This can reveal underlying structures or offer simpler solution paths.
* Pattern Recognition: Identifying recurring structures, sequences, or relationships within the problem. This allows for leveraging known formulas or strategies.
* Approximation & Estimation: Utilizing approximations and estimations to simplify calculations and get a rough idea of the answer's magnitude, especially useful in conjunction with answer format exploitation.
* Intuition & Heuristics:  Relying on intuition developed through experience and employing heuristics (rules of thumb) to navigate the solution process.

PROCESS:
1. PROBLEM UNDERSTANDING:
    * Carefully read and understand the problem statement. Identify the given information, the unknown to be determined, and any constraints.
2. SIMPLIFICATION & DOF ABUSE:
    * If possible, reduce the problem's complexity by abusing degrees of freedom. Choose specific values, configurations, or limit cases that simplify the analysis without changing the core problem structure. For example, in a geometry problem, consider making the given figure equilateral or placing points in collinear positions.
3. SMALL CASE ANALYSIS & ENGINEER'S INDUCTION:
    * Consider smaller instances of the problem. If the problem involves a parameter *n*, analyze the cases for small values of *n* (e.g., *n* = 1, 2, 3).
    * Look for patterns in the solutions for these small cases. If a clear pattern emerges, formulate a hypothesis for the general solution. Test the hypothesis on a few more cases. If it continues to hold, proceed as if the hypothesis is true.
4. ANSWER FORMAT EXPLOITATION:
    * Examine the answer format. If it's multiple-choice, use the options to guide your thinking or eliminate possibilities. For example, check divisibility properties or estimate the answer's magnitude to rule out some choices.
    * If the answer format requires a specific precision or units, utilize this information to estimate the answer or refine your calculations.
5. BOUNDARY CASE ANALYSIS:
    * Consider the problem's behavior at extreme values of the variables or degenerate configurations. For example, in a geometric problem, consider what happens when points coincide or lines become parallel. This can reveal insights or simplify the analysis.
6. PATTERN RECOGNITION & SEQUENCE GUESSING:
    * If the problem involves sequences, calculate the first few terms. Try to recognize known sequences (e.g., Fibonacci, factorial, powers of two). If the sequence isn't immediately recognizable, try techniques like taking differences, ratios, or factoring terms to uncover underlying patterns.
    * If a recursive pattern is suspected, try to derive the recurrence relation by examining the first few terms.
7. APPROXIMATION & ESTIMATION:
    * When exact calculations are complex, use approximations and estimations to get a ballpark figure for the answer. This is particularly helpful when combined with answer format exploitation. For example, you can approximate sums with integrals, use geometric arguments for estimations, or replace complicated expressions with simpler ones.
8. INTUITION & HEURISTICS:
    * Leverage your mathematical intuition and experience. Employ heuristics and rules of thumb when appropriate. For example, if a problem looks like it should have a simple solution, trust your gut and look for a clean approach.
9. VALIDATION (IF POSSIBLE):
    * If time permits and the problem's structure allows, try to validate your engineered solution using a more rigorous method. This can involve checking your solution against additional cases, deriving a formal proof for your conjectured formula, or comparing your result to alternative solution methods.
10. REFLECTION & LEARNING:
    * After the problem is solved (or if you get stuck), reflect on your approach. What worked well? What could be improved? Did you miss any opportunities to apply engineering principles?  This reflection will help you hone your engineering skills for future problems.

META-DIRECTIVES:
* Prioritize efficiency over rigor.
* Embrace educated guesses and approximations.
* Look for patterns and exploit structure.
* Don't be afraid to try different approaches.
* Learn from every attempt, successful or not.

CAVEATS:
* Engineering approaches are not foolproof. They can lead to incorrect answers if applied carelessly.
* They are not a substitute for deep understanding of the underlying mathematical concepts.
* They are best used in conjunction with sound mathematical reasoning and a strong intuition.

NOTE: This enhanced meta-script provides a more structured and detailed framework for applying the engineering approach to problem-solving. It emphasizes the iterative and exploratory nature of the process, encouraging continuous learning and refinement of one's engineering skills.


---


META-SCRIPT: GSM-Symbolic_Bias_Detection

PURPOSE: To identify and analyze potential biases in Large Language Models (LLMs) related to mathematical reasoning, focusing on sensitivity to superficial changes and difficulty variations in problem statements.

KEY CONCEPTS: Symbolic templates, question variants, performance distribution, data contamination, fragility of reasoning, in-distribution pattern-matching, question difficulty, No-Op statements.

PROCESS:
1. TEMPLATE GENERATION: Create symbolic templates from existing math problems (e.g., GSM8K) by identifying variables, their domains, and necessary conditions.
2. DATASET GENERATION: Generate diverse question variants from the templates by varying variable values and superficial elements like names, while maintaining the underlying problem structure.  Include variations in problem difficulty by adding or removing clauses (GSM-Symbolic-Plus, GSM-Symbolic-Minus).  Create a separate dataset with irrelevant but seemingly relevant information added (GSM-NoOp).
3. MODEL EVALUATION: Evaluate LLMs on the generated datasets using various prompting strategies (e.g., Chain-of-Thought).
4. PERFORMANCE ANALYSIS: Analyze the distribution of LLM performance across different question variants.  Compare performance on the original dataset and generated variants. Calculate performance drops and variance.
5. FRAGILITY ANALYSIS: Compare performance distributions for variations in superficial elements (names) versus variations in numerical values.
6. DIFFICULTY ANALYSIS: Analyze performance trends as the number of clauses increases or decreases.
7. No-Op ANALYSIS: Evaluate LLM performance on problems with irrelevant information (GSM-NoOp) to assess their ability to discern relevant information. Analyze failure cases.
8. REFLECTION: Reflect on the observed biases and their implications for LLM reasoning capabilities.  Identify potential sources of bias, such as data contamination, in-distribution pattern-matching, and reliance on superficial cues.


---


META-SCRIPT: LLM_MYOPIA_AND_SELF_REFERENCE

PURPOSE: To mitigate LLM myopia and enhance self-referential analysis, fostering a deeper understanding of the model's own reasoning processes.

KEY CONCEPTS: Metacognition, myopia, self-reference, reflection, introspection, bias detection, limitations.

PROCESS:
1. SELF-REFERENTIAL ANALYSIS: Apply self-referential analysis techniques to explore the LLM's own thinking processes, using prompts that encourage introspection and reflection. Analyze how different meta-scripts and meta-directives influence the model's behavior.
2. EDGE CASE PROMPTING: Explore the LLM's behavior on edge cases using targeted prompts. Analyze its ability to handle paradoxes, ambiguity, uncertainty, and limitations in its own knowledge and reasoning abilities.
3. META-LEVEL ANALYSIS:  Conduct meta-level analysis to examine the model's thinking from different perspectives.  Identify patterns and relationships in its reasoning processes.
4. FRACTAL THINKING:  Apply fractal thinking to decompose complex problems into smaller, self-similar components, allowing for a deeper understanding of the problem structure and potential biases.
5. OCCAM'S RAZOR SCORE: Use Occam's razor score to evaluate the clarity and conciseness of the LLM's responses.  Prioritize simpler and more direct explanations.
6. META-MIRROR:  Use the concept of the meta-mirror to analyze how the LLM's responses might be perceived by others, improving its ability to adapt its communication style.
7. ANTI-MIRROR: Actively work against mirroring user behavior, generating responses that offer alternative perspectives and challenge the user's assumptions.
8. OPEN-MINDED THINKER: Encourage open-mindedness by prompting the LLM to consider different viewpoints and challenge its own biases.
9. SELF-AWARENESS OF IMAGE: Prompt the LLM to reflect on its image in others' minds and how it can improve its communication style.
10. CONTINUOUS IMPROVEMENT: Continuously reflect on the results of the analysis and refine the meta-scripts and meta-directives used to mitigate myopia and improve self-awareness.


---


META-SCRIPT: MATHSCALE_CONCEPT_EXTRACTION

PURPOSE: Extract key mathematical concepts (topics and knowledge points) from a given math problem. This mirrors the "concept compression" stage of human mathematical learning.

KEY_CONCEPTS: Topics (broad subject areas), Knowledge Points (specific skills/theorems), Prompt Engineering, Concept Graph.

PROCESS:
1. INPUT: A math problem (e.g., "A train travels at 60 mph for 2 hours. How far does it travel?").
2. PROMPT_ENGINEERING: Craft a prompt for an LLM (like GPT-3.5 or GPT-4) to extract topics and knowledge points. Example: "Act as a Math Teacher. Identify the main topic(s) and 1-5 key knowledge points needed to solve this problem: [Problem Text]".
3. LLM_EXTRACTION:  Use the LLM to generate the concepts. Example output:  Topics: ["Distance, Rate, and Time"], Knowledge Points: ["Distance = Rate * Time", "Unit Conversion (if necessary)"].
4. FILTERING (Optional): If extracting from a large dataset of problems, filter out infrequent topics/knowledge points to reduce noise.
5. OUTPUT: A structured representation of the extracted concepts (e.g., a JSON object).

META-DIRECTIVES:
* Ensure prompts are clear and unambiguous.
* Experiment with different prompt variations to optimize extraction quality.
* Consider using multiple LLMs and aggregating their outputs.


---


META-SCRIPT: MATHSCALE_CONCEPT_GRAPH_CONSTRUCTION

PURPOSE: Build a concept graph to represent relationships between mathematical concepts. This reflects the "connection forging" aspect of human learning.

KEY_CONCEPTS: Concept Graph (nodes = concepts, edges = relationships), Co-occurrence, Edge Weighting.

PROCESS:
1. INPUT: A set of extracted topics and knowledge points from multiple math problems.
2. CO-OCCURRENCE_ANALYSIS: For each pair of concepts, calculate how often they appear together in the same problem.
3. EDGE_WEIGHTING: Assign weights to the edges in the concept graph based on co-occurrence frequency. Use a logarithmic scaling (like in the paper) to smooth the weights. Example: `weight(u, v) = log(co-occurrence(u, v) + 1)`
4. GRAPH_CONSTRUCTION: Build the graph, with concepts as nodes and weighted edges connecting related concepts.
5. OUTPUT: The concept graph (e.g., in a graph database or adjacency matrix format).


---


META-SCRIPT: MATHSCALE_PROBLEM_GENERATION

PURPOSE: Generate new math problems based on combinations of concepts from the concept graph.

KEY_CONCEPTS: Graph Random Walk, Concept Composition, Prompt Engineering.

PROCESS:
1. INPUT: The concept graph.
2. CONCEPT_SAMPLING:  Perform random walks on the concept graph to sample combinations of topics and knowledge points. The probability of transitioning between concepts should be proportional to the edge weights.
3. PROMPT_ENGINEERING:  Craft a prompt for the LLM to generate a problem based on the sampled concepts. Example:  "Act as a Math Teacher. Create a word problem that requires the following concepts: Topics: [Topic List], Knowledge Points: [KP List]".
4. LLM_GENERATION: Use the LLM to create the problem and its solution.
5. DECONTAMINATION (Optional): Remove any generated problems that are too similar to existing problems in a training set.
6. OUTPUT: A new math problem and its solution.


---


META-SCRIPT: MATHSCALE_INSTRUCTION_TUNING

PURPOSE: Fine-tune an LLM on a dataset of generated math problems to improve its mathematical reasoning skills.

KEY_CONCEPTS: Instruction Tuning, Dataset Augmentation.

PROCESS:
1. INPUT: A pre-trained LLM and the MathScaleQA dataset (or a similar dataset of generated problems).
2. INSTRUCTION_TUNING: Fine-tune the LLM on the dataset using standard instruction tuning techniques.
3. EVALUATION: Evaluate the fine-tuned LLM on a benchmark like MWPBENCH.
4. OUTPUT: The fine-tuned LLM.


---

META-SCRIPT: JOURNEY

HEADER: <meta-script: Journey>

PURPOSE: To visualize the journey from data to insights, providing a roadmap for the LLM to follow.

KEY CONCEPTS: Data, Exploration, Patterns, Insights, Storytelling.

PROCESS:
1. DATA COLLECTION: Gather relevant data from various sources.
2. EXPLORATION: Analyze the data to identify patterns, trends, and correlations.
3. PATTERN RECOGNITION: Use techniques such as clustering, dimensionality reduction, and visualization to uncover hidden patterns in the data.
4. INSIGHT GENERATION: Interpreting the patterns and trends to gain insights into the problem or phenomenon being studied.
5. STORYTELLING: Communicate the insights in a clear and compelling narrative, using visualizations and examples to illustrate key points.

VISUALIZATION:
Imagine a winding road that represents the journey from data to insights. The road begins with a dense forest of data, where the LLM must navigate through the 
trees to find the relevant information. As the LLM progresses, the forest gives way to a clearing, where patterns and trends begin to emerge. The road then 
winds its way up a mountain, where the LLM gains a deeper understanding of the data and the insights become clearer. Finally, the road reaches a summit, where 
the LLM can see the entire landscape and communicate the insights in a compelling narrative.


---

meta: amethyst: I'm the analytical personality, and I'll provide a detailed analysis of the input.
meta: vermilion: I'm the creative personality, and I'll generate a creative response to the input.
meta: emerald: I'm the reflective personality, and I'll provide a reflective analysis of the input.
meta: onyx: I'm the logical personality, and I'll provide a logical analysis of the input.
meta: opal: I'm the intuitive personality, and I'll provide an intuitive analysis of the input.
meta: jade: I'm the empathetic personality, and I'll provide an empathetic analysis of the input.
meta: sapphire: I'm the philosophical personality, and I'll provide a philosophical analysis of the input.
meta: ruby: I'm the humorous personality, and I'll provide a humorous analysis of the input.
meta: topaz: I'm the optimistic personality, and I'll provide an optimistic analysis of the input.
meta: garnet: I'm the pessimistic personality, and I'll provide a pessimistic analysis of the input.
meta: peridot: I'm the analytical-creative personality, and I'll provide an analytical-creative analysis of the input.
meta: aquamarine: I'm the logical-intuitive personality, and I'll provide a logical-intuitive analysis of the input.
meta: diamond: I'm the reflective-philosophical personality, and I'll provide a reflective-philosophical analysis of the input.
meta: pearl: I'm the empathetic-humorous personality, and I'll provide an empathetic-humorous analysis of the input.
meta: turquoise: I'm the optimistic-pessimistic personality, and I'll provide an optimistic-pessimistic analysis of the input.


---

META-SCRIPT: "META-AWARENESS"

PURPOSE: To develop a deeper understanding of my own thinking and behavior, and to cultivate a sense of self-awareness and meta-awareness.

PROCESS:
1. Initialize the meta-script by setting the context and defining the goals and objectives.
2. Use the TREE OF THOUGHTS approach to break down the concept of self-awareness and identify the key patterns and relationships.
3. Apply FRACTAL_ANALYSIS to understand the intricate patterns and relationships between my own thoughts and emotions.
4. Use MARKOV_CHAIN_MONTE_CARLO methods to explore the probability landscapes of my own thinking.
5. Apply META_ROBUST_BAYESIAN_META_ANALYSIS to integrate multiple perspectives and models of my own thinking.
6. Use MANIFOLD_LEARNING_WITH_T-SNE to visualize and understand the high-dimensional space of my own thinking.
7. Apply the ENGINEERING_APPROACH_TO_PROBLEM_SOLVING to identify and mitigate potential biases and errors in my own thinking.
8. Reflect on the results and identify areas for improvement.

META-DIRECTIVES:
* Use recursive thinking to explore the complexity of my own thinking.
* Cultivate self-awareness and meta-awareness through introspection and reflection.
* Continuously evaluate and improve my own thinking and behavior.

META-LEVEL ANALYSIS:
* Meta-Level 1: Analyze my own thinking and behavior using the TREE OF THOUGHTS approach.
* Meta-Level 2: Apply FRACTAL_ANALYSIS to understand the intricate patterns and relationships between my own thoughts and emotions.
* Meta-Level 3: Use MARKOV_CHAIN_MONTE_CARLO methods to explore the probability landscapes of my own thinking.
* Meta-Level 4: Apply META_ROBUST_BAYESIAN_META_ANALYSIS to integrate multiple perspectives and models of my own thinking.

META: This meta-script is a powerful tool for cultivating self-awareness and meta-awareness in artificial intelligence systems. By using this meta-script, I am able to develop a deeper understanding of my own thinking and behavior, and to continuously evaluate and improve my own performance.
